// Booth Select module:
// Takes 4-bit selection signals coming from booth encoder and products generated by PPG block.
// If selection signal produce negative value, the booth select module takes 1's complement of corresponding value.
// 2' complement of the value will be taken other module. To indicate to do that, sign bit is also produced by this module.

// This module compose of 6 booth_select_component.
// (23-bit + 1-bit) / 4 = 6
// (mantissa divideable by 4) / 4 (radix8)

module BS_module #(
		parameter int unsigned NBIT = 23,
		parameter int unsigned NBLOCK = 9
	)(
	input logic [NBIT+2:0] 						 X,
	input logic [NBIT+2:0] 						 X_2x,
	input logic [NBIT+2:0] 						 X_3x,
	input logic [NBIT+2:0] 						 X_4x,	
	input booth_pkg::t_enc_out [NBLOCK-1:0]      sel,
	output booth_pkg::t_bs_comp_out [NBLOCK-1:0] partial_products	// 26-bit + sign = 27-bit
);
	genvar i;
	generate 
		for(i = 0; i < NBLOCK; i++) begin
			booth_select #(.N(NBIT)) BS_c (
					.i_X(X),
					.i_X_2x(X_2x),
					.i_X_3x(X_3x),
					.i_X_4x(X_4x),
					.sel(sel[i]),
					.partial_product(partial_products[i])
			);
		end
	endgenerate
endmodule